/**
 * Helloworld style, connect an ESP8266 to the IBM IoT Foundation
 * 
 * Author: Tim Minter
 * License: Apache License v2
 */

#include <PubSubClient.h> //MQTT library
#include <WEMOS_DHT12.h> //Temperature and humidity sensor library
#include <ArduinoJson.h> //JSON handling (for formatting sent data)
#include <Adafruit_GFX.h> //LED Matrix
#include <WEMOS_Matrix_GFX.h> //LED Matrix
//wifi includes
#include <ESP8266WiFi.h>
#include <DNSServer.h> //Local DNS Server used for redirecting all requests to the configuration portal
#include <ESP8266WebServer.h> //Local WebServer used to serve the configuration portal
#include <WiFiManager.h> //https://github.com/tzapu/WiFiManager WiFi Configuration Magic


//-------- Customise these values with the values from Watson IoT -----------
// You will need to create a free Watson IoT instance (ORG) and create an IoT device in that instance. 
#define ORG "" //the org name will be shown when you create the device and it's always shpwn at the top left of the Watson IoT UI
#define DEVICE_TYPE "ESP8266" //suggested name - just needs to match your created device
#define DEVICE_ID "AIPlant" //suggested name - just needs to match your created device
#define TOKEN "" //Add the token created when you created the device here
//-------------------------------------------

// WIFI_HOTSPOT_SETUP
// When the device starts a wifi hotspot will be created. When you connect to it, you will be presented with a configuration page. 
// You can set the name of the created hotspot and password for it (if you want to set a password) below
#define ACCESS_POINT_NAME "Mossy"
#define ACCESS_POINT_PASSWORD ""

// sensor pin
// Connect the Capacitive moisture sensor to this pin
#define SENSOR_PIN D1

// Thresholds for the capacitive moistre sensor. Feel free to play with these. They are used in the emoji matrix display only.
#define WET 484
#define DRY 855
#define TOODRY 750
#define WARNINGDRY 710
//Dry: 855. Wet: 484 (range is 371)

// Standard Watson IoT config details (to which the custom values above are appended)
char BROKER[] = ORG ".messaging.internetofthings.ibmcloud.com";
char COMMAND_TOPIC[] = "iot-2/evt/status/fmt/json";
char authMethod[] = "use-token-auth";
char token[] = TOKEN;
char CLIENTID[] = "d:" ORG ":" DEVICE_TYPE ":" DEVICE_ID;

// LED Matrix definition
MLED mled(7); //set intensity=7
// Temperature and Humidity definition
DHT12 dht12;

int val; // moinsture variable
char dataString[300]; // json data variable (for sending)

// definition of the emoji for the LED matrix
static const uint8_t PROGMEM
  smile_bmp[] =
  { B00111100,
    B01000010,
    B10100101,
    B10000001,
    B10100101,
    B10011001,
    B01000010,
    B00111100 },
  neutral_bmp[] =
  { B00111100,
    B01000010,
    B10100101,
    B10000001,
    B10111101,
    B10000001,
    B01000010,
    B00111100 },
  frown_bmp[] =
  { B00111100,
    B01000010,
    B10100101,
    B10000001,
    B10011001,
    B10100101,
    B01000010,
    B00111100 },
  smile_mouth_bmp[] =
  { B00000000,
    B00000000,
    B10000001,
    B11000011,
    B01100110,
    B00111100,
    B00000000,
    B00000000 },
    frown_mouth_bmp[] =
  { B00000000,
    B00000000,
    B00111100,
    B01100110,
    B11000011,
    B10000001,
    B00000000,
    B00000000 },
    neutral_mouth_bmp[] =
  { B00000000,
    B00000000,
    B00000000,
    B11111111,
    B11111111,
    B00000000,
    B00000000,
    B00000000 };

WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(9600);
  mled.setTextSize(1);
  mled.setTextWrap(false);  // we dont want text to wrap so it scrolls nicely
  mled.setTextColor(LED_ON);
  for (int8_t x=0; x>=-48; x--) {
    mled.clear();
    mled.setCursor(x,0);
    mled.print("Starting");
    mled.writeDisplay();
    delay(100);
  }
  Serial.println("MAC: ");
  Serial.println(WiFi.macAddress());
  setup_wifiHotSpot();
  client.setServer(BROKER, 1883);
  client.setCallback(callback);

}

void setup_wifiHotSpot() {
  
  // Start by connecting to the WiFi network   
  Serial.println();
  Serial.print("Connecting to wifi or setting up access point");
  
  WiFiManager wifiManager;
  wifiManager.autoConnect(ACCESS_POINT_NAME,ACCESS_POINT_PASSWORD);
  
  wait_for_wifi();
  
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  
}

void wait_for_wifi()
{
  
  Serial.println("waiting for Wifi");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
}

void callback(char* topic, byte* payload, unsigned int length) {
//callback current unused in this device

  const size_t bufferSize = JSON_OBJECT_SIZE(5) + 30;
  DynamicJsonBuffer jsonBuffer(bufferSize);
  
  const char* json = (char*)payload;
  
  JsonObject& root = jsonBuffer.parseObject(json);
  
  

}

void reconnect() {
  

  // Loop until we're reconnected to the broker  
  while (!client.connected()) {

    if (WiFi.status() != WL_CONNECTED) {
      wait_for_wifi();
    }
    
    Serial.print("Attempting MQTT connection...");
    
    // Attempt to connect
    if (client.connect(CLIENTID, "use-token-auth", TOKEN)) {
      Serial.println("connected");
    } 
    else {
      Serial.print("failed, rc=");
      Serial.println(client.state());

    }
  }
 
  // subscribe to the command topic
  client.subscribe(COMMAND_TOPIC);
}

void loop() {
 if (!client.connected()) {
    reconnect();
  }

   //service the MQTT client
  client.loop();

   val = analogRead(0); //connect sensor to Analog 0

    //temp and humdidty reading code
    if(dht12.get()==0){
      Serial.print("Temperature in Celsius : ");
      Serial.println(dht12.cTemp);
      Serial.print("Relative Humidity : ");
      Serial.println(dht12.humidity);
      Serial.println();
      // If you want, the temp, humidity and moisture values can be scrolled over the LED Matrix. Uncomment the line below to enable this
      LEDMatrixValues(round(dht12.cTemp), round(dht12.humidity), val);
    }

  mled.clear();
  if(val<=WARNINGDRY){
    Serial.println("ALL GOOD");
    mled.drawBitmap(0, 0, smile_mouth_bmp, 8, 8, LED_ON);
  } else if(val>TOODRY){
    Serial.println("TOO DRY");
    mled.drawBitmap(0, 0, frown_mouth_bmp, 8, 8, LED_ON);
  } else {
    Serial.println("WARNING DRY");
    mled.drawBitmap(0, 0, neutral_mouth_bmp, 8, 8, LED_ON);
  }
  mled.writeDisplay();
  delay(30000);

  StaticJsonBuffer<200> jsonBuffer;
  JsonObject& root = jsonBuffer.createObject();
  root["sensor"] = "Mossy";
  root["moisture"] = val;
  root["temperature"] = dht12.cTemp;
  root["humidity"] = dht12.humidity;
  root.printTo(Serial);
  root.printTo(dataString);
  root.prettyPrintTo(Serial);
  Serial.print("Sending payload: ");
  Serial.print(dataString);
  if (client.publish(COMMAND_TOPIC, dataString)) {
     Serial.println("Publish ok");
  } else {
     Serial.println("Publish failed");
     for (int8_t x=0; x>=-72; x--) {
        mled.clear();
        mled.setCursor(x,0);
        mled.print("Failure!!");
        mled.writeDisplay();
        delay(100);
      }
  }
}

void LEDMatrixValues(int tempVal, int humidityVal, int moistureVal){
      for (int8_t x=0; x>=-72; x--) {
        mled.clear();
        mled.setCursor(x,0);
        mled.print("Humidity: " + String(humidityVal));
        mled.writeDisplay();
        delay(50);
      }
      
      for (int8_t x=0; x>=-95; x--) {
        mled.clear();
        mled.setCursor(x,0);
        mled.print("Temperature: " + String(tempVal));
        mled.writeDisplay();
        delay(50);
      }
     
      for (int8_t x=0; x>=-110; x--) {
        mled.clear();
        mled.setCursor(x,0);
        mled.print("Moisture: " + String(moistureVal));
        mled.writeDisplay();
        delay(50);
      }
}
